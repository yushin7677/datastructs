#ifndef _STACK_H
#define _STACK_H
#endif

/////////////////////////////////////////////////////////////////
//                                                             //
//                           Стек                              //
//                                                             //
/////////////////////////////////////////////////////////////////

//-----------------//
// Структура стека //
//-----------------//
typedef struct{

	int *p;
	int size;
	
} Stack;

//----------------------------------------------------------------------------------------------------------------------//
// Функция обнуления стека([указатель на Stack]) // возвращает 0
//----------------------------------------------------------------------------------------------------------------------//
Stack createStack(){ 

	Stack stack;
	stack->p = NULL;
	stack->size = 0;

	return stack;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция вывода стека в консоль([указатель на Stack]) // возвращает 0 - успеха, -1 - ошибка
//----------------------------------------------------------------------------------------------------------------------//
int printStack(Stack *stack){ 

	// если стек положительный, то выведем его
	if(stack->p != NULL) for(int i = 0; i < stack->size; i++) printf("stack[%d] = %d\n", i, stack->p[i]);

	// в противном случае выведем сообщение о том, что стек пуст
	else printf("printStack: This is void stack\n");

	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция вставки элемента в стек([указатель на Stack],[значение]) // возвращает 0 - успеха, -1 - ошибка
//----------------------------------------------------------------------------------------------------------------------//
int pushToStack(Stack *stack, int value){ 

	// объявляем локальный указатель
	int *p;

	if(stack->p != NULL) p = (int *)realloc(stack->p, (stack->size + 1) * sizeof(int)); 	// если стек уже положительный, то проводим реаллокацию
	else p = (int *)malloc(sizeof(int));                        			 	  			// В противном случае проводим аллокацию с нуля
 
	if(p != NULL){   // если аллокация удалась, то совершаем действия
		stack->p = p;  													 		// Передаем указатель в стек
		stack->size++; 													 		// увеличиваем значение размера на 1
		stack->p[stack->size - 1] = value;
	}
	else return -1;  // в противном случае вернем ошибку

	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция удаления элемента стека ([указатель на Stack]) // возвращает значение удаленного элемента
//----------------------------------------------------------------------------------------------------------------------//
int popFromStack(Stack *stack){ 

	// если стек положительный, то удалим первый элемент
	if(stack->size > 0){
		int a = stack->p[stack->size - 1];
		stack->p = (int*)realloc(stack->p, (stack->size - 1)*sizeof(int));    // уменьшим длину массива на единицу
		stack->size--;                                                        // уменьшим значение длины на единицу
		return a;
	}

	// в противном случае выведем сообщение о том, что стек пуст
	else{
		printf("popFromStack: This is void stack\n");
		return 0;
	};
	
};
