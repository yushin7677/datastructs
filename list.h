#ifndef LIST_H
#define LIST_H
#endif

/////////////////////////////////////////////////////////////////
//                                                             //
//                          Списки                             //
//                                                             //
/////////////////////////////////////////////////////////////////

//-----------------------------//
// Структура односвязного узла //
//-----------------------------//
typedef struct Node_tag{

	int value;
	struct Node_tag *next;
	
} Node;

//-------------------------------//
// Структура односвязного списка //
//-------------------------------//
typedef struct List_tag{

	Node *head;
	
} List;

//----------------------------------------------------------------------------------------------------------------------//
// Функция обнуления 1-списка ([указатель на List]) // возвращает 0
//----------------------------------------------------------------------------------------------------------------------//
int clearList(List *list){ 

	list->head = NULL;
	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция вывода 1-списка ([указатель на List]) // возвращает 0
//----------------------------------------------------------------------------------------------------------------------//
int printList(List *list){

	// Если список не пустой, выведем каждый его узел
	if(list->head != NULL){

		Node *tmp = list->head;  // Создаем указатель на первый узел
		while(tmp != NULL){ 	 // пока указатель непустой, выполним действия:

			printf("List-node = %d\n",tmp->value); // выведем значения узла, на который указывает tmp
			tmp = tmp->next;					   // переукажем tmp на следующий узел. Если его нет, цикл завершится

		};

	}

	// в противном случае выведем сообщение о том, что список пуст
	else printf("printList: This is void list\n");

	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция добавления узла в начало 1-списка ([указатель на List], [значение]) // возвращает 0
//----------------------------------------------------------------------------------------------------------------------//
int InsertToBeginList(List *list, int value){ 

	Node *tmp = (Node*) malloc(sizeof(Node)); //Создаем узел
	tmp->value = value;                       //Задаем ему значение

	if(list->head != NULL) tmp->next = list->head; //Если список не пустой, присвоим узлу->next ссылку на первый узел списка
	else tmp->next = NULL;						   //иначе присвоим ему NULL

	list->head = tmp;
	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция удаления узла из начала 1-списка ([указатель на List]) // возвращает значение удаленного узла
//----------------------------------------------------------------------------------------------------------------------//
int deleteFromBeginList(List *list){ 

	// Если список не пустой, удалим первый узел
	if(list->head != NULL){
		Node *tmp = list->head;   		// Создадим новый указатель на первый элемент
		list->head = list->head->next;  // Переопределим head на 2-й узел

		int a = tmp->value;
		free(tmp);						// Уничтожим первый узел
		return a;
	}

	// в противном случае выведем сообщение о том, что список пуст
	else printf("deleteFromBeginList: This is void list\n");	
	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция добавления узла в конец 1-списка ([указатель на List], [значение]) // возвращает 0
//----------------------------------------------------------------------------------------------------------------------//
int InsertToEndList(List *list, int value){ 

	// Если список не пустой, найдем его последний узел
	if(list->head != NULL){

		Node *tmp = list->head;   				  // Создаем указатель на первый узел
		while(tmp->next != NULL) tmp = tmp->next; // пока указатель tmp->next непустой, переуказываем его на следующий узел.
		
		// Теперь tmp указывает на последний узел списка

		Node *tmp2 = (Node*) malloc(sizeof(Node)); // Создаем новый узел
		tmp2->value = value;					   // Задаем ему значение
		tmp->next = tmp2;						   // Направим указатель последнего узла на узел tmp2

	}

	// Иначе просто создадим узел и вставим его в начало списка
	else{

		Node *tmp = (Node*) malloc(sizeof(Node)); // Создаем новый узел
		tmp->value = value;					   	  // Задаем ему значение
		list->head = tmp;						  // Сделаем его первым узлом списка

	};

	return 0;
	
};

//----------------------------------------------------------------------------------------------------------------------//
// Функция удаления узла из конца 1-списка ([указатель на List]) // возвращает значение удаленного узла
//----------------------------------------------------------------------------------------------------------------------//
int deleteFromEndList(List *list){ 

	// Если список не пустой, удалим первый узел
	if(list->head != NULL){
		Node *tmp = list->head;   				  // Создадим новый указатель на первый элемент
		while(tmp->next != NULL) tmp = tmp->next; // пока указатель tmp->next непустой, переуказываем его на следующий узел.

		// Теперь tmp указывает на последний узел списка

		// Если head указывает на последний узел, т.е. в списке всего 1 узел, то очистим head
		if(list->head == tmp) list->head = NULL;

		// Иначе найдем предпоследний элемент и сделаем его последним
		else{

			Node *tmp2 = list->head; 						   // Создадим новый указатель на первый элемент
			while(tmp2->next->next != NULL) tmp2 = tmp2->next; // пока указатель tmp2->next->next непустой, переуказываем его на следующий узел.

			// Теперь tmp2 указывает на предпоследний узел списка
			tmp2->next = NULL;

		};

		return tmp->value;
		free(tmp);
	}

	// в противном случае выведем сообщение о том, что список пуст
	else printf("deleteFromEndList: This is void list\n");	
	return 0;
	
};
